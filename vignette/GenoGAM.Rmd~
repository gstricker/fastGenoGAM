---
  title: "Modeling ChIP-Seq data with GenoGAM2: A Genome-wide generalized additive model"
  shorttitle: "fastGenoGAM"
  author: 
  - name: Georg Stricker
	affiliation: &id Technical University Munich
	email: georg.stricker@gmx.net
  - name: Julien Gagneur
	affiliation: *id
	email: gagneur@in.tum.de
  date: "`r format(Sys.Date(), '%m/%d/%Y')`"
  package: fastGenoGAM
  abstract: >
	Many genomic assays lead to noisy observations of a biological quantity of 
	interest varying along the genome. This is the case for ChIP-Seq, for which
	read counts reflect local protein occupancy of the ChIP-ed protein. 
	The fastGenoGAM package allows statistical analysis of genome-wide data with 
	smooth functions using generalized additive models. 
	<!-- It provides methods for -->
	<!-- the statistical analysis of ChIP-Seq data including inference of protein  -->
	<!-- occupancy, and pointwise and region-wise differential analysis as well as  -->
	<!-- peak calling with position-wise confidence bands. Estimation of dispersion  -->
	<!-- and smoothing parameters is performed by cross-validation. Scaling of  -->
	<!-- generalized additive model fitting to whole chromosomes is achieved by  -->
	<!-- parallelization over overlapping genomic intervals.  -->
	This vignette explains
	the use of the package for typical ChIP-Seq analysis workflow.
  output: 
    BiocStyle::html_document:
		toc_float: true
  bibliography: bibliog.bib
  vignette: >
    %\VignetteIndexEntry{Vignette Title}
    %\VignetteEngine{knitr::rmarkdown}
    %\VignetteEncoding{UTF-8}  
 ---

```{r setup, echo=FALSE, results="hide"}
knitr::opts_chunk$set(tidy=FALSE, cache=TRUE,
                      dev="png",
                      message=FALSE, error=FALSE, warning=TRUE)
```

GenoGAM version: packageVersion("GenoGAM")

**Note:** if you use fastGenoGAM in published research, please cite:

> Stricker and Engelhardt, et al. (2017)
> GenoGAM: Genome-wide generalized additive models for ChIP-seq analysis
> *Bioinformatics*, **33**:15.
> [10.1093/bioinformatics/btx150](https://doi.org/10.1093/bioinformatics/btx150)

# TL;DR (with HDF5)

This is the brief version of the usual workflow of fastGenoGAM. It involves:

- Reading in data through `Rfunction{"GenoGAMDataSet"}` to get a `Robject{"GenoGAMDataSet"}` object. This is done with the HDF5 backend.
  
- Computing size factors with `Rfunction{"computeSizeFactors"}`
  
- Compute the model with `Rfunction{"genogam"}` to get the result `Robject{"GenoGAM"}` object

```{r}
library(fastGenoGAM)

## specify folder and experiment design path
wd <- system.file("extdata/Set1", package='fastGenoGAM')
folder <- file.path(wd, "bam")
expDesign <- file.path(wd, "experimentDesign.txt")

## set HDF5 folder
hdf5_folder <- tempdir()
settings <- GenoGAMSettings(hdf5Control = list(dir = hdf5_folder))

## register parallel backend (default is "the number of cores" - 2)
BiocParallel::register(BiocParallel::SnowParam(worker = 2))

## specify chunk and overhang size
chunkSize <- 50000
overhangSize <- 1000

## build the GenoGAMDataSet with HDF5 backend
ggd <- GenoGAMDataSet(
  expDesign, directory = folder,
  chunkSize = chunkSize, overhangSize = overhangSize,
  design = ~ s(x) + s(x, by = genotype),
  settings = settings, hdf5 = TRUE
)

ggd

## compute size factors
ggd <- computeSizeFactors(ggd)

ggd

## compute model without parameter estimation to save time in vignette
result <- genogam(ggd, lambda = 4601, theta = 4.51)

result
```

# Acknowledgments

We thank Alexander Engelhardt, Mathilde Galinier, Simon Wood, Herv\'e Pag\`es, and Martin Morgan for input in the development of GenoGAM2

# Session Info

```{r}
sessionInfo()
```

# References

